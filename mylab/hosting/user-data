#cloud-config

# Workers cloud-config: run fleetd only
coreos:
  fleet:
    public-ip: $private_ipv4
    metadata: "platform=ec2,provider=aws,region=us-west-2,disk=ssd,role=sites,env=mylab"
    etcd_servers: "http://10.0.2.50:4001,http://10.0.2.100:4001,http://10.0.2.150:4001"
  update:
    reboot-strategy: off
  units:
    - name: etcd.service
      mask: true
    - name: fleet.service
      command: reload-or-restart
# coreos.units.* components
    - name: format-disk.service
      command: start
      content: |
        [Unit]
        Description=Formats the disk drive
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        Environment="LABEL=var-lib-docker"
        Environment="DEV=/dev/xvdb"
        # Do not wipe btrfs if it's already being used.'
        ExecStart=-/bin/bash -c "if ! findfs LABEL=$LABEL > /tmp/label.$LABEL; then  wipefs -f $DEV && mkfs.btrfs -f -L $LABEL $DEV && echo wiped; fi"
    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=Mount disk to /var/lib/docker
        Requires=format-disk.service
        After=format-disk.service
        Before=docker.service
        [Mount]
        What=/dev/xvdb
        Where=/var/lib/docker
        Type=btrfs

    - name: setup-etcdctl-env.service
      command: start
      content: |       
          [Unit]
          Description=Setup etcdctl env vars
          Wants=coreos-setup-environment.service
          After=coreos-setup-environment.service
          
          [Service]
          Type=oneshot
          RemainAfterExit=true
          ExecStart=/bin/bash -c "source /etc/profile.d/etcd-envvars.sh; env | grep -E 'ETCDCTL|FLEETCTL|INSTANCE_ID' >>  /etc/environment"
          [Install]
          WantedBy=multi-user.target
    - name: s3sync.service
      command: start
      content: |
        [Unit]
        Description=s3sync
        Requires=docker.service
        After=docker.service
        
        [Service]
        EnvironmentFile=/etc/environment
        TimeoutStartSec=10min
        ExecStartPre=-/usr/bin/docker rm s3sync
        ExecStart=/opt/bin/s3sync.sh
        [Install]
        WantedBy=multi-user.target
    - name: s3sync.timer
      command: start
      content: |      
        [Unit]
        Description=s3sync timer
        
        [Timer]
        OnCalendar=*:*:00
        #OnUnitActiveSec=30
        
        [Install]
        WantedBy=multi-user.target
    - name: user-data.service
      command: start
      content: |       
          [Unit]
          Description=A hook to excute bootstrap script at boot
          Wants=s3sync.service
          After=s3sync.service
          
          [Service]
          Type=oneshot
          RemainAfterExit=true
          EnvironmentFile=/etc/environment
          ExecStartPre=/usr/bin/bash -c "until [ -d /var/lib/apps/bin ]; do sleep 3; done; chmod a+x /var/lib/apps/bin/*"
          ExecStart=/var/lib/apps/bin/user-data.sh
          [Install]
          WantedBy=multi-user.target
write_files:
  - path: /etc/profile.d/etcd-envvars.sh
    permissions: 0644
    owner: root
    content: |
        # Override default etcd host (127.0.0.0:4001),
        # these env vars are necessary for tools that talk to etcd.
        # Used to generate envs in /etc/environment file used by units
        export ETCDCTL_PEERS="http://10.0.2.50:4001,http://10.0.2.100:4001,http://10.0.2.150:4001"
        export FLEETCTL_ENDPOINT="http://etcd.cluster.local:4001"
        export INSTANCE_ID=$(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id)
  - path: /opt/bin/setup-aws-env
    permissions: 0700
    owner: root
    content: |
        #!/bin/bash
        mkdir -p /root/.aws/
        AWS_CONFIG_ENV=/root/.aws/envvars
        echo "AWS_ACCESS_KEY_ID=$(etcdctl get /_pacific/_aws/deployment/id)" > $AWS_CONFIG_ENV
        echo "AWS_SECRET_ACCESS_KEY=$(etcdctl get /_pacific/_aws/deployment/key)" >> $AWS_CONFIG_ENV
        echo "AWS_DEFAULT_REGION=us-west-2" >> $AWS_CONFIG_ENV
        AWS_CONFIG_FILE=/root/.aws/config
        echo "[default]" >> $AWS_CONFIG_FILE
        echo "aws_access_key_id = $(etcdctl get /_pacific/_aws/deployment/id)" > $AWS_CONFIG_FILE
        echo "aws_secret_access_key = $(etcdctl get /_pacific/_aws/deployment/key)" >> $AWS_CONFIG_FILE
        echo "region = us-west-2" >>  $AWS_CONFIG_FILE
        chmod 600 /root/.aws/*
        cp -r /root/.aws  /home/core/
        chown -R core:core /home/core/.aws
        chmod 600 /home/core/.aws/*      
  - path: /opt/bin/s3sync.sh
    permissions: 0700
    owner: root
    content: |
        #!/bin/bash
        AWS_CONFIG_ENV=/root/.aws/envvars
        [[ -f $AWS_CONFIG_ENV ]] || /opt/bin/setup-aws-env
        IMAGE=suet/awscli:latest
        APPBUCKET=$(etcdctl get /_pacific/_aws/deployment/app-config-bucket)
        DST=/var/lib/apps
        CMD="aws s3 sync --recursive --exact-timestamps --delete $APPBUCKET $DST && chmod 755 ${DST}/bin/*"
        
        # pull the IMAGE if not loaded
        docker history $IMAGE > /dev/null 2>&1 || docker pull $IMAGE
        # sync s3 apps to
        docker run --rm --name s3sync -v ${DST}:${DST} --env-file=$AWS_CONFIG_ENV $IMAGE /bin/bash -c "$CMD"
  - path: /etc/systemd/system/docker.service.d/50-insecure-registry.conf
    content: |
        [Service]
        Environment=DOCKER_OPTS='--insecure-registry=dockerhub.mylab.example.com'
        
